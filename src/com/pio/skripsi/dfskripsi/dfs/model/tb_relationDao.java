package com.pio.skripsi.dfskripsi.dfs.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table tb_relation.
*/
public class tb_relationDao extends AbstractDao<tb_relation, String> {

    public static final String TABLENAME = "tb_relation";

    public static class Properties {
        public final static Property id_node = new Property(0, String.class, "id_node", true, "id_node");
        public final static Property id_way = new Property(1, String.class, "id_way", false, "id_way");
    };


    public tb_relationDao(DaoConfig config) {
        super(config);
    }
    
    public tb_relationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Select the underlying database table. */
    public static void selectIDWay(SQLiteDatabase db, String IdNode) {
        String sql = "SELECT id_way FROM tb_relation where (id_node = "+IdNode+");";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, tb_relation entity) {
        stmt.clearBindings();
 
        String id_node = entity.getId_node();
        if (id_node != null) {
            stmt.bindString(0, id_node);
        }
 
        String id_way = entity.getId_way();
        if (id_way != null) {
            stmt.bindString(1, id_way);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    } 

    /** @inheritdoc */
    @Override
    public tb_relation readEntity(Cursor cursor, int offset) {
    	tb_relation entity = new tb_relation( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0),
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1)
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, tb_relation entity, int offset) {
        entity.setId_node(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId_way(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }

	@Override
	protected boolean isEntityUpdateable() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected String getKey(tb_relation entity) {
        if(entity != null) {
            return entity.getId_node();
        } else {
            return null;
        }
	}

	@Override
	protected String updateKeyAfterInsert(tb_relation arg0, long arg1) {
		// TODO Auto-generated method stub
		return null;
	}
    
}
